Plan del Proyecto - Sistema de Gestión de Streaming en Go
Nombre del Proyecto: Sistema de Gestión de Streaming
Repositorio: https://github.com/0montes0/streaming-go-project
1. Objetivo General
Desarrollar un sistema de gestión de streaming en Go que permita registrar usuarios, cargar contenidos (películas y series), reproducirlos y calificarlos, incorporando programación orientada a objetos, servicios web REST y pruebas automatizadas.
2. Alcance del Proyecto
•	Consola interactiva para gestión de usuarios y contenidos.
•	Servicios web para registrar, consultar, calificar y reproducir contenidos vía JSON.
•	Validaciones de entrada (edad, correos únicos, rango de estrellas).
•	Pruebas unitarias básicas para entidades clave.
•	Concurrencia en el manejo del servidor HTTP.
3. Justificación
Go es un lenguaje moderno, eficiente y altamente concurrente. Este proyecto explora su uso en el desarrollo de un sistema de streaming básico como plataforma para aplicar conocimientos de programación orientada a objetos, interfaces, concurrencia y diseño modular.
4. Estructura del Sistema
Módulo	Descripción
Gestión de Usuarios	Registro, validación y listado de usuarios.
Gestión de Contenidos	Creación y consulta de películas y series.
Reproducción	Simulación de streaming desde consola y endpoint /stream.
Calificaciones	Registro y visualización de calificaciones con validación.
Servicios REST	API JSON para operar remotamente con usuarios, contenidos y calificaciones.
Pruebas Unitarias	Validación de lógica con testing de Go en tres archivos separados.

5. Cronograma de Desarrollo
Semana	Actividad
1–2	Planeación y análisis del sistema
3–4	Codificación de la versión en consola (POO + validaciones)
5–6	Creación de servicios REST con Gorilla Mux
7	Implementación de pruebas y concurrencia
8	Documentación, presentación, grabación de video

6. Tecnologías Usadas
•	Lenguaje: Go
•	Librerías: net/http, github.com/gorilla/mux, encoding/json, testing
•	Herramientas: VS Code, Git, Postman, Go modules
•	Versionado: GitHub
7. Resultados Esperados
•	Funcionalidad completa vía consola y REST API.
•	Código organizado en paquetes main, models, handlers.
•	Documentación clara y diagrama de clases.
•	Video demostrativo de pruebas reales.
•	Informe con reflexión y visión futura del sistema.
8. Riesgos Identificados
Riesgo	Estrategia de Mitigación
Errores en concurrencia	Pruebas controladas y uso de goroutines
Pérdida de datos en memoria	Modularización para posible persistencia
Retrasos en pruebas o entrega	Control semanal de avances
